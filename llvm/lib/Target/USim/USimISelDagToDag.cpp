#include "MCTargetDesc/USimMCTargetDesc.h"
#include "USim.h"
#include "USimTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "usim-isel"

namespace {

class USimDAGToDAGISel : public SelectionDAGISel {
  const USimSubtarget *Subtarget = nullptr;

public:
  USimDAGToDAGISel(USimTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<USimSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  bool SelectAddrFI(SDValue Addr, SDValue &Base);
  bool SelectBaseAddr(SDValue Addr, SDValue &Base);

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "USim DAG->DAG Pattern Instruction Selection";
  }

  static USimCC::CondCode getUSimCCForIntCC(ISD::CondCode CC) {
    switch (CC) {
    case ISD::SETEQ:
      return USimCC::EQ;
    case ISD::SETNE:
      return USimCC::NE;
    case ISD::SETLE:
      return USimCC::LE;
    case ISD::SETGT:
      return USimCC::GT;
    case ISD::SETULE:
      return USimCC::LEU;
    case ISD::SETUGT:
      return USimCC::GTU;
    default:
      llvm_unreachable("");
    }
  }

// Include the pieces autogenerated from the target description.
#include "USimGenDAGISel.inc"
};

} // end anonymous namespace

/// This pass converts a legalized DAG into a USim-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createUSimISelDag(USimTargetMachine &TM,
                                      CodeGenOpt::Level OptLevel) {
  return new USimDAGToDAGISel(TM, OptLevel);
}

bool USimDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }
  return false;
}

bool USimDAGToDAGISel::SelectBaseAddr(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr))
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
  else
    Base = Addr;
  return true;
}

void USimDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  unsigned Opcode = Node->getOpcode();
  SDLoc DL(Node);
  MVT VT = Node->getSimpleValueType(0);

  switch (Opcode) {
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i32);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node, CurDAG->getMachineNode(USim::ADDI, DL, VT, TFI, Imm));
    return;
  }
  case ISD::Constant: {
    auto *ConstNode = cast<ConstantSDNode>(Node);
    assert(VT == MVT::i32);
    int64_t Imm = ConstNode->getSExtValue();
    SDNode *Res = nullptr;
    if (isUInt<16>(Imm)) {
      SDValue SDImm = CurDAG->getTargetConstant(Imm, DL, MVT::i32);
      Res = CurDAG->getMachineNode(USim::MOVLIu, DL, VT, SDImm);
    } else if (isInt<16>(Imm)) {
      SDValue SDImm = CurDAG->getTargetConstant(Imm, DL, MVT::i32);
      Res = CurDAG->getMachineNode(USim::MOVLIs, DL, VT, SDImm);
    } else {
      // (h' << 16) + (l >> 15) * (-1 << 16) + l
      // ((h' + (l >> 15) * (-1 << 16)) + l
      // h + l,  h' = h - (l >> 15) * (-1 << 16)
      uint16_t ImmLi = (uint64_t)Imm & 0xffff;
      uint16_t ImmHi = ((uint64_t)Imm >> 16) - ((ImmLi >> 15) ? 0xffff : 0);
      SDValue SDImmLi = CurDAG->getTargetConstant(ImmLi, DL, MVT::i32);
      SDValue SDImmHi = CurDAG->getTargetConstant(ImmHi, DL, MVT::i32);
      Res = CurDAG->getMachineNode(USim::MOVHI, DL, VT, SDImmHi);
      Res =
          CurDAG->getMachineNode(USim::ADDI, DL, VT, SDValue(Res, 0), SDImmLi);
    }
    ReplaceNode(Node, Res);
    return;
  }
  }
  SelectCode(Node);
}
